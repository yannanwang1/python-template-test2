### YamlMime:UniversalReference
api_name: []
items:
- children:
  - microsoftml_scikit.preprocessing.Expression.get_params
  class: microsoftml_scikit.preprocessing.Expression
  fullName: microsoftml_scikit.preprocessing.Expression
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.internal.core.base_pipeline_item.BasePipelineItem
    - inheritance:
      - inheritance:
        - type: builtins.object
        type: microsoftml_scikit.internal.core.base_pipeline_item.BaseSignature
      type: microsoftml_scikit.internal.core.base_pipeline_item.DefaultSignature
    type: microsoftml_scikit.internal.core.preprocessing._expression.Expression
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: sklearn.base.BaseEstimator
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.internal.core.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.base_transform.BaseTransform
  - inheritance:
    - type: builtins.object
    type: sklearn.base.TransformerMixin
  langs:
  - python
  module: microsoftml_scikit.preprocessing
  name: Expression
  source:
    id: Expression
    path: microsoftml_scikit\preprocessing\_expression.py
    remote:
      branch: HEAD
      path: microsoftml_scikit\preprocessing\_expression.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 20
  summary: "\n**Description**\n\nExecutes a given lambda expression on input column\
    \ values to produce an output column value.\n\n**Details**\n\nThe `Expression`\
    \ transform applies a lambda function specified by the *expression* argument to\n\
    the specified input columns, to either produce new output columns, or simply replace\
    \ the values\nin the existing columns. For the full list of the functions/operators\
    \ supported by expression, please refer\nto [Expression Tutorial](../tutorials/3-5.md).\n\
    \nSome examples:\n\n* `x : x / 2.0` will divide all values in a column by 2.0\
    \ \n\n* `x : x ?? 0` will replace NaN values with zero \n\n* `x : float(isna(x))`\
    \ will be 1 or 0, depending on if value is NA \n\n* `(x, y) : x * cos(y)` multiplies\
    \ values in first column by cos() of values in the second column \n\n* `(x, y,\
    \ z) : (x > y + z) ? \"majority\" : \"not_majority\"` takes 3 columns as input,\
    \ and evaluates to\n\n     \"majority\" if first column values are greater than\
    \ sum of other two columns.\n\nThe *with* expression:\n\nThe *with* expression\
    \ is useful when derived values are easier to work with than the\noriginal values.\
    \ Use this expression to generate a named temporary variable\n\nSome examples:\n\
    * `x : with ( f = x * 9 / 5 + 32; f < 60 ? \"cold\" : \"warm\" )` converts celsius\
    \ to\n\n\n   fahrenheit before determining if it's cold or warm.\n\n\n* `(x, y)\
    \ : with ( f = x + y; f > 4 ? \"too big\" : \"too small\" )` sums up values in\n\
    \n     two columns x and y, and stores that value in variable f for comparison.\n\
    \nSupported Operators:\n\n* `? :` -  the conditional operator (e.g. (x > 1) ?\
    \ 5.0 : 1.0 ) \n\n* `??` - the coalesce operator  (e.g. x ?? y  resolves to y\
    \ if x is NA, else x) \n\n* `||` - logical or \n\n* `&&` -  logical and \n\n*\
    \ `==`, `=` - equals \n\n* `!=`, `<>` - not equals \n\n* `<`, `<=`, less than\
    \ or equal \n\n* `>`, `>=`, greater than or equal \n\n* `+`, `-`, addition and\
    \ subtraction \n\n* `*`, `/`, `%`` - multiplication, subtraction and modulus \n\
    \n* `-`, `!`, `not` - numeric negation and logical not \n\n* `^`  - power \n\n\
    * `( )` - parenthetical grouping \n\nSupported Functions:\n\nNA handling:\n\n\
    All are unary functions.\n\n* `isna` - returns boolean if values is a NA \n\n\
    * `na` - convert value to NA of same type (e.g. text or numeric) \n\n* `default`\
    \ - returns default value of that type (e.g. zero for numeric, empty string for\
    \ text) \n\nType conversion:\n\nAll are unary functions.\n\n* `bool` - convert\
    \ TX or BL type to BL \n\n* `int` - convert BL, I4, I8, R4, R8 or TX types to\
    \ I4 \n\n* `long` - convert BL, I4, I8, R4, R8 or TX types to I8 \n\n* `single,\
    \ float` - convert BL, I4, I8, R4, R8 or TX types to R8 \n\n* `double` - convert\
    \ BL, I4, I8, R4, R8 or TX types to R8 \n\n* `text` - convert BL, I4, I8, R4,\
    \ R8 or TX types to TX \n\nSign operations:\n\nUnary functions, accepting inputs\
    \ of type I4, I8, R4, or R8.\n\n* `abs` - absolute value \n\n* `sign` - produces\
    \ -1, 0 or 1 if the input is negative, zero or positive \n\nComparison operations:\n\
    \nBinary functions accepting inputs of type I4, I8, R4, or R8.\n\n* `min` - minimum\
    \ of two values \n\n* `max` - maximum of two values \n\nMathematical functions:\n\
    \nUnary functions for inputs of type R4 or R8\n\n* `sqrt` - square root \n\n*\
    \ `exp` - e to power of operand \n\n* `ln` - natural log \n\n* `sin` - sine in\
    \ radians \n\n* `sind` - sine in degrees \n\n* `sinh` - hyperbolic sine \n\n*\
    \ `cos` - cosine in radians \n\n* `cosd` - cosine in degrees \n\n* `cosh` - hyperbolic\
    \ cosine \n\n* `tan` - tangent in radians \n\n* `tand` - tangent in degrees \n\
    \n* `tanh` - hyperbolic tangent \n\n* `asin` - inverse sine \n\n* `acos` - inverse\
    \ cosine \n\n* `atan` - inverse tangent \n\nBinary functions for inputs of type\
    \ R4 or R8.\n\n* `log` - log using a given base (e.g. log(x, 10)) \n\n* `atan2`,\
    \ `atanyx` - determine angle between -pi and pi from given y and x values. y is\
    \ first operand. \n\nText functions:\n\n* `len` - length of text value, returning\
    \ I4. \n\n* `lower` - map to lower case \n\n* `upper` - map to upper case \n\n\
    * `left(str, k)` - returns characters in str to left of index position k. k is\
    \ I4, and if negative implies from end of string value. \n\n* `right(str, k)`\
    \ - similar to left(str, k), but returns chars to the right of k. \n\n* `mid(str,\
    \ k, j)` - returns characters between positions k and j. \n\n* `concat(s1, s2,\
    \ ..., sn)` - returns concatenation of strings. \n\n**See Also**\n\n   @microsoftml_scikit.preprocessing.normalization.MinMaxScaler,\n\
    \   @microsoftml_scikit.preprocessing.normalization.Binner,\n   @microsoftml_scikit.preprocessing.normalization.SupervizedBinner,\n\
    \   @microsoftml_scikit.preprocessing.normalization.OptionalScaler,\n   @microsoftml_scikit.preprocessing.normalization.LogMeanVarianceScaler,\n\
    \   @microsoftml_scikit.preprocessing.normalization.GlobalContrastRowScaler.\n\
    \n\n\n-[ Example ]-\n\n\n"
  syntax:
    content: 'Expression(expression=''(x) : x'', columns=None, **params)'
    parameters:
    - description: "a dictionary of key-value pairs, where key is the output column\
        \ name and value is the input column name.\n\n* Multiple key-value pairs are\
        \ allowed. \n\n* Input column type: numeric or string (or list of numeric\
        \ or string) \n\n* Output column type: type depends on lambda operation. \n\
        \n* If the output column names are same as the input column names, then simply\
        \ specify `columns` as a list of strings. \n\nThe << operator can be used\
        \ to set this value (see *use-operator-to-select-columns*)\n\nFor example:\n\
        \n* Expression(columns={'out1':'input1', 'out2':'input2'}) \n\n* Expression()\
        \ << {'out1':'input1', 'out2':'input2'} \n\nThe expression transform supports\
        \ column types R4 (single precision floating point number), R8 (double precision\n\
        floating point number), I4 (4 byte integer), I8 (8 byte integer), BL (boolean),\
        \ and TX (text). It does not\ncurrently support the date/time types, or key\
        \ types. For more details see *l-pipeline-syntax*.\n"
      id: columns
    - description: 'Lambda expression which will be applied.

        '
      id: expression
    - description: 'Additional arguments sent to compute engine.

        '
      id: params
  type: class
  uid: microsoftml_scikit.preprocessing.Expression
- class: microsoftml_scikit.preprocessing.Expression
  fullName: microsoftml_scikit.preprocessing.Expression.get_params
  langs:
  - python
  module: microsoftml_scikit.preprocessing
  name: get_params
  source:
    id: get_params
    path: microsoftml_scikit\preprocessing\_expression.py
    remote:
      branch: HEAD
      path: microsoftml_scikit\preprocessing\_expression.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 201
  summary: 'Get the parameters for this operator.

    '
  syntax:
    content: get_params(deep=False)
    parameters:
    - defaultValue: 'False'
      id: deep
  type: method
  uid: microsoftml_scikit.preprocessing.Expression.get_params
references:
- fullName: microsoftml_scikit.preprocessing.Expression.get_params
  isExternal: false
  name: get_params
  parent: microsoftml_scikit.preprocessing.Expression
  uid: microsoftml_scikit.preprocessing.Expression.get_params
