### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: microsoftml_scikit.FastTreeRegressor
  fullName: microsoftml_scikit.FastTreeRegressor
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.modules.base.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.modules.core.ensemble.fasttreeregressor.FastTreeRegressor
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: sklearn.base.BaseEstimator
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.modules.base.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.modules.base.base_predictor.BasePredictor
  - inheritance:
    - type: builtins.object
    type: sklearn.base.RegressorMixin
  langs:
  - python
  module: microsoftml_scikit
  name: FastTreeRegressor
  source:
    id: FastTreeRegressor
    path: microsoftml_scikit\modules\ensemble\fasttreeregressor.py
    remote:
      branch: master
      path: microsoftml_scikit\modules\ensemble\fasttreeregressor.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 20
  summary: '















    '
  syntax:
    content: 'FastTreeRegressor(num_trees: numbers.Real = 100, num_leaves: numbers.Real
      = 20, feature_column: str = ''Features'', min_split: numbers.Real = 10, label_column:
      str = ''Label'', learning_rate: numbers.Real = 0.2, weight_column: str = None,
      group_id_column: str = None, normalize: str = ''Auto'', caching: str = ''Auto'',
      best_step_ranking_regression_trees: bool = False, use_line_search: bool = False,
      num_post_bracket_steps: numbers.Real = 0, min_step_size: numbers.Real = 0.0,
      optimizer: str = ''GradientDescent'', early_stopping_rule: dict = None, early_stopping_metrics:
      numbers.Real = 1, enable_pruning: bool = False, use_tolerant_pruning: bool =
      False, pruning_threshold: numbers.Real = 0.004, pruning_window_size: numbers.Real
      = 5, shrinkage: numbers.Real = 1.0, dropout_rate: numbers.Real = 0.0, get_derivatives_sample_rate:
      numbers.Real = 1, write_last_ensemble: bool = False, max_tree_output: numbers.Real
      = 100.0, random_start: bool = False, filter_zero_lambdas: bool = False, baseline_scores_formula:
      str = None, baseline_alpha_risk: str = None, position_discount_freeform: str
      = None, parallel_trainer: dict = None, train_threads: numbers.Real = None, random_state:
      numbers.Real = 123, feature_select_seed: numbers.Real = 123, entropy_coefficient:
      numbers.Real = 0.0, histogram_pool_size: numbers.Real = -1, disk_transpose:
      bool = None, feature_flocks: bool = True, num_bins: numbers.Real = 255, sparsify_threshold:
      numbers.Real = 0.7, first_use_penalty: numbers.Real = 0.0, feature_reuse_penalty:
      numbers.Real = 0.0, gain_conf_level: numbers.Real = 0.0, softmax_temperature:
      numbers.Real = 0.0, execution_times: bool = False, feature_fraction: numbers.Real
      = 1.0, bagging_size: numbers.Real = 0, example_fraction: numbers.Real = 0.7,
      split_fraction: numbers.Real = 1.0, smoothing: numbers.Real = 0.0, allow_empty_trees:
      bool = True, feature_compression_level: numbers.Real = 1, compress_ensemble:
      bool = False, max_trees_after_compression: numbers.Real = -1, test_frequency:
      numbers.Real = 2147483647, **params)'
    parameters:
    - description: 'Specifies the total number of decision trees to create in the
        ensemble. By creating more decision

        trees, you can potentially get better coverage, but the training time increases.

        '
      id: num_trees
    - description: 'The maximum number of leaves (terminal nodes) that can be created
        in any tree. Higher values

        potentially increase the size of the tree and get better precision, but risk
        overfitting and requiring longer

        training times.

        '
      id: num_leaves
    - description: 'Column to use for features.

        '
      id: feature_column
    - description: 'The minimal number of documents allowed in a leaf of a regression
        tree, out of the subsampled data.

        '
      id: min_split
    - description: 'Column to use for labels.

        '
      id: label_column
    - description: 'Determines the size of the step taken in the direction of the
        gradient in each step of the

        learning process.  This determines how fast or slow the learner converges
        on the optimal solution. If the step size

        is too big, you might overshoot the optimal solution.  If the step size is
        too small, training takes longer to

        converge to the best solution.

        '
      id: learning_rate
    - description: 'Column to use for example weight.

        '
      id: weight_column
    - description: 'Column to use for example groupId.

        '
      id: group_id_column
    - description: 'If `Auto`, the choice to normalize depends on the preference declared
        by the algorithm. This is the

        default choice. If `No`, no normalization is performed. If `Yes`, normalization
        always performed. If `Warn`,

        if normalization is needed by the algorithm, a warning message is displayed
        but normalization is not performed. If

        normalization is performed, a `MaxMin` normalizer is used. This normalizer
        preserves sparsity by mapping zero to

        zero.

        '
      id: normalize
    - description: 'Whether learner should cache input training data.

        '
      id: caching
    - description: 'Use best regression step trees?.

        '
      id: best_step_ranking_regression_trees
    - description: 'Should we use line search for a step size.

        '
      id: use_line_search
    - description: 'Number of post-bracket line search steps.

        '
      id: num_post_bracket_steps
    - description: 'Minimum line search step size.

        '
      id: min_step_size
    - description: 'Optimization algorithm to be used (GradientDescent, AcceleratedGradientDescent).

        '
      id: optimizer
    - description: 'Early stopping rule. (Validation set (/valid) is required.).

        '
      id: early_stopping_rule
    - description: 'Early stopping metrics. (For regression, 1: L1, 2:L2; for ranking,
        1:NDCG@1, 3:NDCG@3).

        '
      id: early_stopping_metrics
    - description: 'Enable post-training pruning to avoid overfitting. (a validation
        set is required).

        '
      id: enable_pruning
    - description: 'Use window and tolerance for pruning.

        '
      id: use_tolerant_pruning
    - description: 'The tolerance threshold for pruning.

        '
      id: pruning_threshold
    - description: 'The moving window size for pruning.

        '
      id: pruning_window_size
    - description: 'Shrinkage.

        '
      id: shrinkage
    - description: 'Dropout rate for tree regularization.

        '
      id: dropout_rate
    - description: 'Sample each query 1 in k times in the GetDerivatives function.

        '
      id: get_derivatives_sample_rate
    - description: 'Write the last ensemble instead of the one determined by early
        stopping.

        '
      id: write_last_ensemble
    - description: 'Upper bound on absolute value of single tree output.

        '
      id: max_tree_output
    - description: 'Training starts from random ordering (determined by /r1).

        '
      id: random_start
    - description: 'Filter zero lambdas during training.

        '
      id: filter_zero_lambdas
    - description: 'Freeform defining the scores that should be used as the baseline
        ranker.

        '
      id: baseline_scores_formula
    - description: 'Baseline alpha for tradeoffs of risk (0 is normal training).

        '
      id: baseline_alpha_risk
    - description: 'The discount freeform which specifies the per position discounts
        of documents in a

        query (uses a single variable P for position where P=0 is first position).

        '
      id: position_discount_freeform
    - description: 'Allows to choose Parallel FastTree Learning Algorithm.

        '
      id: parallel_trainer
    - description: 'The number of threads to use.

        '
      id: train_threads
    - description: 'The seed of the random number generator.

        '
      id: random_state
    - description: 'The seed of the active feature selection.

        '
      id: feature_select_seed
    - description: 'The entropy (regularization) coefficient between 0 and 1.

        '
      id: entropy_coefficient
    - description: 'The number of histograms in the pool (between 2 and numLeaves).

        '
      id: histogram_pool_size
    - description: 'Whether to utilize the disk or the data''s native transposition
        facilities (where applicable) when

        performing the transpose.

        '
      id: disk_transpose
    - description: 'Whether to collectivize features during dataset preparation to
        speed up training.

        '
      id: feature_flocks
    - description: 'Maximum number of distinct values (bins) per feature.

        '
      id: num_bins
    - description: 'Sparsity level needed to use sparse feature representation.

        '
      id: sparsify_threshold
    - description: 'The feature first use penalty coefficient. This is a form of regularization
        that incurs a

        penalty for using a new feature when creating the tree. Increase this value
        to create trees that don''t use many

        features.

        '
      id: first_use_penalty
    - description: 'The feature re-use penalty (regularization) coefficient.

        '
      id: feature_reuse_penalty
    - description: 'Tree fitting gain confidence requirement (should be in the range
        [0,1) ).

        '
      id: gain_conf_level
    - description: 'The temperature of the randomized softmax distribution for choosing
        the feature.

        '
      id: softmax_temperature
    - description: 'Print execution time breakdown to stdout.

        '
      id: execution_times
    - description: 'The fraction of features (chosen randomly) to use on each iteration.

        '
      id: feature_fraction
    - description: 'Number of trees in each bag (0 for disabling bagging).

        '
      id: bagging_size
    - description: 'Percentage of training examples used in each bag.

        '
      id: example_fraction
    - description: 'The fraction of features (chosen randomly) to use on each split.

        '
      id: split_fraction
    - description: 'Smoothing paramter for tree regularization.

        '
      id: smoothing
    - description: 'When a root split is impossible, allow training to proceed.

        '
      id: allow_empty_trees
    - description: 'The level of feature compression to use.

        '
      id: feature_compression_level
    - description: 'Compress the tree Ensemble.

        '
      id: compress_ensemble
    - description: 'Maximum Number of trees after compression.

        '
      id: max_trees_after_compression
    - description: 'Calculate metric values for train/valid/test every k rounds.

        '
      id: test_frequency
    - description: 'Additional arguments sent to compute engine.

        '
      id: params
  type: class
  uid: microsoftml_scikit.FastTreeRegressor
references: []
