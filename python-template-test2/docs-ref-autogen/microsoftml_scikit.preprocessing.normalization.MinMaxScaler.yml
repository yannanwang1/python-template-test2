### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: microsoftml_scikit.preprocessing.normalization.MinMaxScaler
  fullName: microsoftml_scikit.preprocessing.normalization.MinMaxScaler
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.internal.core.base_pipeline_item.BasePipelineItem
    - inheritance:
      - inheritance:
        - type: builtins.object
        type: microsoftml_scikit.internal.core.base_pipeline_item.BaseSignature
      type: microsoftml_scikit.internal.core.base_pipeline_item.DefaultSignature
    type: microsoftml_scikit.internal.core.preprocessing.normalization.minmaxscaler.MinMaxScaler
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: sklearn.base.BaseEstimator
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.internal.core.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.base_transform.BaseTransform
  - inheritance:
    - type: builtins.object
    type: sklearn.base.TransformerMixin
  langs:
  - python
  module: microsoftml_scikit.preprocessing.normalization
  name: MinMaxScaler
  source:
    id: MinMaxScaler
    path: microsoftml_scikit\preprocessing\normalization\minmaxscaler.py
    remote:
      branch: master
      path: microsoftml_scikit\preprocessing\normalization\minmaxscaler.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 20
  summary: "\n**Description**\n\n   Normalizes columns as specified below.\n\n**Details**\n\
    \n   In linear classification algorithms instances are viewed as vectors in\n\
    \   multi-dimensional space. Since the range of values of raw data varies\n  \
    \ widely, some objective functions do not work properly without\n   normalization.\
    \ For example, if one of the features has a broad range of\n   values, the distances\
    \ between points is governed by this particular\n   feature. Therefore, the range\
    \ of all features should be normalized so\n   that each feature contributes approximately\
    \ proportionately to the final\n   distance. This can provide significant speedup\
    \ and accuracy benefits. In\n   all the linear algorithms in TLC (@../../../Logistic\
    \ Regression\n   <microsoftml_scikit.linear_model.LogisticRegressionClassifier,\n\
    \   @microsoftml_scikit.linear_model.AveragedPerceptronBinaryClassifier,\n   @../../../microsoftml_scikit.svm.LocalDeepSvmBinaryClassifier,\
    \ etc.),\n   the default is to normalize features before training.\n\n   *MinMaxScaler*\
    \ is the default normalizer for many *PyTLC* algorithms\n   and linearly rescales\
    \ every feature to the [0,1] or the [-1,1] interval.\n   Rescaling to the [0,1]\
    \ interval is done by shifting the values of each\n   feature so that the minimal\
    \ value is 0, and then dividing by the new\n   maximal value (which is the difference\
    \ between the original maximal and\n   minimal values). Rescaling to the [-1,1]\
    \ interval is done by dividing\n   the values of each feature by the maximal absolute\
    \ value of the feature.\n   This method is useful for preserving the sparsity\
    \ of a dataset, since 0\n   values do not change. The scaling method can be specified\
    \ by setting the\n   *fix_zero* to *False* for the first method, or setting it\
    \ to *True* for\n   the second method.\n\n**See Also**\n\n   @microsoftml_scikit.preprocessing.normalization.MinMaxScaler,\n\
    \   @microsoftml_scikit.preprocessing.normalization.Binner,\n   @../../../microsoftml_scikit.preprocessing.normalization.SupervizedBinner,\n\
    \   @microsoftml_scikit.preprocessing.normalization.MeanVarianceScaler,\n   @microsoftml_scikit.preprocessing.normalization.LogMeanVarianceScaler,\n\
    \   @microsoftml_scikit.preprocessing.normalization.GlobalContrastRowScaler.\n\
    \n\n"
  syntax:
    content: MinMaxScaler(fix_zero=True, max_training_examples=1000000000, columns=None,
      **params)
    parameters:
    - description: "a dictionary of key-value pairs, where key is the output column\
        \ name and value is the input column name.\n\n* Multiple key-value pairs are\
        \ allowed. \n\n* Input column type: numeric or *VectorType*. \n\n* Output\
        \ column type: *VectorType*. \n\n* If the output column names are same as\
        \ the input column names, then simply specify `columns` as a list of strings.\
        \ \n\nThe << operator can be used to set this value (see :ref:LinkToOperator)\n\
        \nFor example\n   * MinMaxScaler(columns={'out1':'input1', 'out2':'input2'})\
        \ \n\n   * MinMaxScaler() << {'out1':'input1', 'out2':'input2'} \n\nFor more\
        \ details see *l-pipeline-syntax*.\n"
      id: columns
    - description: 'Whether to map zero to zero, preserving sparsity.

        '
      id: fix_zero
    - description: 'Max number of examples used to train the normalizer.

        '
      id: max_training_examples
    - description: 'Additional arguments sent to compute engine.

        '
      id: params
  type: class
  uid: microsoftml_scikit.preprocessing.normalization.MinMaxScaler
references: []
