### YamlMime:UniversalReference
api_name: []
items:
- children:
  - microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary.neuralnetwork_trainbinary
  fullName: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary
  langs:
  - python
  module: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary
  name: neuralnetwork_trainbinary
  source:
    id: neuralnetwork_trainbinary
    path: microsoftml_scikit\internal\entrypoints\neuralnetwork_trainbinary.py
    remote:
      branch: master
      path: microsoftml_scikit\internal\entrypoints\neuralnetwork_trainbinary.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 0
  summary: 'NeuralNetwork.TrainBinary

    '
  type: module
  uid: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary
- fullName: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary.neuralnetwork_trainbinary
  langs:
  - python
  module: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary
  name: neuralnetwork_trainbinary
  source:
    id: neuralnetwork_trainbinary
    path: microsoftml_scikit\internal\entrypoints\neuralnetwork_trainbinary.py
    remote:
      branch: master
      path: microsoftml_scikit\internal\entrypoints\neuralnetwork_trainbinary.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 14
  summary: "**Description**\n   A binary neural network is a binary classification\
    \ algorithm that uses neural network with two outputs to predict a certain binary\
    \ value. TLC supports various types of neural networks, including deep neural\
    \ networks (DNNs) and convolutional neural networks (CNN) via Net# language.\n"
  syntax:
    content: neuralnetwork_trainbinary(training_data, predictor_model=None, feature_column='Features',
      label_column='Label', weight_column=None, normalize_features='Auto', caching='Auto',
      default_hidden_nodes=100, net_file_name=None, net_definition=None, num_iterations=100,
      optimization_algorithm=None, loss_function=None, pre_training_epoch=None, distrib_trainer=None,
      display_refresh=1, init_wts_diameter=0.1, max_norm=0.0, early_stopping_rule=None,
      early_stopping_metrics=0, model_file_bin=None, model_file_bin_unrolled=None,
      model_file_text=None, pruning=False, pruning_factor=0.01, pruning_rounds=10,
      pruning_round_iterations=5, acceleration=None, pre_trainer_type='NoPreTrainer',
      mini_batch_size=1, shuffle=True, input_dropout_rate=0.0, hidden_dropout_rate=0.0,
      **params)
    parameters:
    - description: 'The data to be used for training (inputs).

        '
      id: training_data
    - defaultValue: None
      description: 'Column to use for features (inputs).

        '
      id: feature_column
    - defaultValue: Features
      description: 'Column to use for labels (inputs).

        '
      id: label_column
    - defaultValue: Label
      description: 'Column to use for example weight (inputs).

        '
      id: weight_column
    - defaultValue: None
      description: 'Normalize option for the feature column (inputs).

        '
      id: normalize_features
    - defaultValue: Auto
      description: 'Whether learner should cache input training data (inputs).

        '
      id: caching
    - defaultValue: Auto
      description: 'Default number of hidden nodes (inputs).

        '
      id: default_hidden_nodes
    - defaultValue: '100'
      description: 'Net file name (inputs).

        '
      id: net_file_name
    - defaultValue: None
      description: 'Net# definition (inputs).

        '
      id: net_definition
    - defaultValue: None
      description: 'Number of training iterations (inputs).

        '
      id: num_iterations
    - defaultValue: '100'
      description: 'Optimization algorithm (Adadelta or SGD) (inputs).

        '
      id: optimization_algorithm
    - defaultValue: None
      description: 'Loss function (inputs).

        '
      id: loss_function
    - defaultValue: None
      description: 'Number of epochs for pre-training. If not set, defaults to numIterations(iter).
        (inputs).

        '
      id: pre_training_epoch
    - defaultValue: None
      description: 'Distributed training algorithm (inputs).

        '
      id: distrib_trainer
    - defaultValue: None
      description: 'Display refresh frequency in number iterations (inputs).

        '
      id: display_refresh
    - defaultValue: '1'
      description: 'Init weights diameter (inputs).

        '
      id: init_wts_diameter
    - defaultValue: '0.1'
      description: 'Constrains the norm of incoming weights of a node (inputs).

        '
      id: max_norm
    - defaultValue: '0.0'
      description: 'Early stopping rule (inputs).

        '
      id: early_stopping_rule
    - defaultValue: None
      description: 'Early stopping metrics (inputs).

        '
      id: early_stopping_metrics
    - defaultValue: '0'
      description: 'Filename for the binary model (inputs).

        '
      id: model_file_bin
    - defaultValue: None
      description: 'Filename for the binary unrolled model (inputs).

        '
      id: model_file_bin_unrolled
    - defaultValue: None
      description: 'Filename for the text model (inputs).

        '
      id: model_file_text
    - defaultValue: None
      description: 'Enable post-training pruning (Optimal Brain Damage) (inputs).

        '
      id: pruning
    - defaultValue: 'False'
      description: 'Pruning factor: % of weights removed each pruning iteration (inputs).

        '
      id: pruning_factor
    - defaultValue: '0.01'
      description: 'Number of pruning rounds (inputs).

        '
      id: pruning_rounds
    - defaultValue: '10'
      description: 'Number of pruning round iterations (inputs).

        '
      id: pruning_round_iterations
    - defaultValue: '5'
      description: 'Hardware acceleration level (inputs).

        '
      id: acceleration
    - defaultValue: None
      description: 'Net Pre-Trainer (inputs).

        '
      id: pre_trainer_type
    - defaultValue: NoPreTrainer
      description: 'Mini-batch size (inputs).

        '
      id: mini_batch_size
    - defaultValue: '1'
      description: 'Whether to shuffle for each training iteration (inputs).

        '
      id: shuffle
    - defaultValue: 'True'
      description: 'Input dropout rate (inputs).

        '
      id: input_dropout_rate
    - defaultValue: '0.0'
      description: 'Hidden dropout rate (inputs).

        '
      id: hidden_dropout_rate
    - defaultValue: '0.0'
      description: 'The trained model (outputs).

        '
      id: predictor_model
  type: function
  uid: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary.neuralnetwork_trainbinary
references:
- fullName: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary.neuralnetwork_trainbinary
  isExternal: false
  name: neuralnetwork_trainbinary
  parent: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary
  uid: microsoftml_scikit.internal.entrypoints.neuralnetwork_trainbinary.neuralnetwork_trainbinary
