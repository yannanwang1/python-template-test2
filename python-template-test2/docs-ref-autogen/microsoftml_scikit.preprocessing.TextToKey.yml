### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: microsoftml_scikit.preprocessing.TextToKey
  fullName: microsoftml_scikit.preprocessing.TextToKey
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.internal.core.base_pipeline_item.BasePipelineItem
    - inheritance:
      - inheritance:
        - type: builtins.object
        type: microsoftml_scikit.internal.core.base_pipeline_item.BaseSignature
      type: microsoftml_scikit.internal.core.base_pipeline_item.DefaultSignature
    type: microsoftml_scikit.internal.core.preprocessing.texttokey.TextToKey
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: sklearn.base.BaseEstimator
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.internal.core.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.base_transform.BaseTransform
  - inheritance:
    - type: builtins.object
    type: sklearn.base.TransformerMixin
  langs:
  - python
  module: microsoftml_scikit.preprocessing
  name: TextToKey
  source:
    id: TextToKey
    path: microsoftml_scikit\preprocessing\texttokey.py
    remote:
      branch: master
      path: microsoftml_scikit\preprocessing\texttokey.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 20
  summary: "\n**Description**\n\n   Text transforms that can be performed on data\
    \ before training\n   a model.\n\n**Details**\n\n   The `TextToKey` transform\
    \ converts a column of text to key values\n   using a dictionary. This operation\
    \ can be reversed by using\n   @microsoftml_scikit.preprocessing.KeyToText to\
    \ obtain the\n   orginal values.\n\n**See Also**\n\n   @microsoftml_scikit.preprocessing.KeyToText,\n\
    \   @microsoftml_scikit.feature_extraction.categorical.OneHotHashVectorizer,\n\
    \   @microsoftml_scikit.feature_extraction.categorical.OneHotVectorizer,\n   @microsoftml_scikit.feature_extraction.text.NGramFeaturizer.\n\
    \n\n"
  syntax:
    content: TextToKey(max_num_terms=1000000, term=None, sort='Occurrence', text_key_values=False,
      columns=None, **params)
    parameters:
    - description: "a dictionary of key-value pairs, where key is the output column\
        \ name and value is the input column name.\n\n* Multiple key-value pairs are\
        \ allowed. \n\n* Input column type: numeric or string. \n\n* Output column\
        \ type: *Key*. \n\n* If the output column names are same as the input column\
        \ names, then simply specify `columns` as a list of strings. \n\nThe << operator\
        \ can be used to set this value (see :ref:LinkToOperator)\n\nFor example\n\
        \   * TextToKey(columns={'out1':'input1', 'out2':'input2'}) \n\n   * TextToKey()\
        \ << {'out1':'input1', 'out2':'input2'} \n\nFor more details see *l-pipeline-syntax*.\n"
      id: columns
    - description: 'Maximum number of terms to keep per column when auto-training.

        '
      id: max_num_terms
    - description: 'List of terms.

        '
      id: term
    - description: 'How items should be ordered when vectorized. By default, they
        will be in the order encountered. If by value

        items are sorted according to their default comparison, e.g., text sorting
        will be case sensitive (e.g., ''A'' then

        ''Z'' then ''a'').

        '
      id: sort
    - description: 'Whether key value metadata should be text, regardless of the actual
        input type.

        '
      id: text_key_values
    - description: 'Additional arguments sent to compute engine.

        '
      id: params
  type: class
  uid: microsoftml_scikit.preprocessing.TextToKey
references: []
