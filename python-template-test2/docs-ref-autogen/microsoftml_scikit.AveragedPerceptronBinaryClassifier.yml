### YamlMime:UniversalReference
api_name: []
items:
- children:
  - microsoftml_scikit.AveragedPerceptronBinaryClassifier.fit
  - microsoftml_scikit.AveragedPerceptronBinaryClassifier.get_params
  - microsoftml_scikit.AveragedPerceptronBinaryClassifier.predict
  - microsoftml_scikit.AveragedPerceptronBinaryClassifier.score
  - microsoftml_scikit.AveragedPerceptronBinaryClassifier.set_params
  class: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.modules.base.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.modules.core.linear_model.averagedperceptronbinaryclassifier.AveragedPerceptronBinaryClassifier
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: sklearn.base.BaseEstimator
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.modules.base.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.modules.base.base_predictor.BasePredictor
  - inheritance:
    - type: builtins.object
    type: sklearn.base.ClassifierMixin
  langs:
  - python
  module: microsoftml_scikit
  name: AveragedPerceptronBinaryClassifier
  source:
    id: AveragedPerceptronBinaryClassifier
    path: microsoftml_scikit\modules\linear_model\averagedperceptronbinaryclassifier.py
    remote:
      branch: master
      path: microsoftml_scikit\modules\linear_model\averagedperceptronbinaryclassifier.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 20
  summary: '




















    '
  syntax:
    content: 'AveragedPerceptronBinaryClassifier(feature_column: str = ''Features'',
      label_column: str = ''Label'', normalize: str = ''Auto'', caching: str = ''Auto'',
      loss_function: dict = None, learning_rate: numbers.Real = 1.0, decrease_learning_rate:
      bool = False, l2_regularizer_weight: numbers.Real = 0.0, num_iterations: numbers.Real
      = 1, init_wts_diameter: numbers.Real = 0.0, reset_weights_after_x_examples:
      numbers.Real = None, do_lazy_updates: bool = True, recency_gain: numbers.Real
      = 0.0, recency_gain_multi: bool = False, averaged: bool = True, averaged_tolerance:
      numbers.Real = 0.01, initial_weights: str = None, shuffle: bool = True, streaming_cache_size:
      numbers.Real = 1000000, **params)'
    parameters:
    - description: 'Column to use for features.

        '
      id: feature_column
    - description: 'Column to use for labels.

        '
      id: label_column
    - description: "Specifies the type of automatic normalization used:\n\n* `\"Auto\"\
        `: if normalization is needed, it is performed automatically. This is the\
        \ default choice. \n\n* `\"No\"`: no normalization is performed. \n\n* `\"\
        Yes\"`: normalization is performed. \n\n* `\"Warn\"`: if normalization is\
        \ needed, a warning message is displayed, but normalization is not performed.\
        \ \n\nNormalization rescales disparate data ranges to a standard scale. Feature\n\
        scaling insures the distances between data points are proportional and\nenables\
        \ various optimization methods such as gradient descent to converge\nmuch\
        \ faster. If normalization is performed, a `MaxMin` normalizer is\nused. It\
        \ normalizes values in an interval [a, b] where `-1 <= a <= 0`\nand `0 <=\
        \ b <= 1` and `b - a = 1`. This normalizer preserves\nsparsity by mapping\
        \ zero to zero.\n"
      id: normalize
    - description: 'Whether learner should cache input training data.

        '
      id: caching
    - description: 'Loss Function.

        '
      id: loss_function
    - description: 'Learning rate.

        '
      id: learning_rate
    - description: 'Decrease learning rate.

        '
      id: decrease_learning_rate
    - description: 'L2 Regularization Weight.

        '
      id: l2_regularizer_weight
    - description: 'Number of iterations.

        '
      id: num_iterations
    - description: 'Init weights diameter.

        '
      id: init_wts_diameter
    - description: 'Number of examples after which weights will be reset to the current
        average.

        '
      id: reset_weights_after_x_examples
    - description: 'Instead of updating averaged weights on every example, only update
        when loss is nonzero.

        '
      id: do_lazy_updates
    - description: 'Extra weight given to more recent updates.

        '
      id: recency_gain
    - description: 'Whether Recency Gain is multiplicative (vs. additive).

        '
      id: recency_gain_multi
    - description: 'Do averaging?.

        '
      id: averaged
    - description: 'The inexactness tolerance for averaging.

        '
      id: averaged_tolerance
    - description: 'Initial Weights and bias, comma-separated.

        '
      id: initial_weights
    - description: 'Whether to shuffle for each training iteration.

        '
      id: shuffle
    - description: 'Size of cache when trained in Scope.

        '
      id: streaming_cache_size
    - description: 'Additional arguments sent to compute engine.

        '
      id: params
  type: class
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier
- class: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.fit
  langs:
  - python
  module: microsoftml_scikit
  name: fit
  source:
    id: fit
    path: microsoftml_scikit\utils\utils.py
    remote:
      branch: master
      path: microsoftml_scikit\utils\utils.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 28
  summary: 'Fits the predictor.

    Returns self.

    '
  syntax:
    content: fit(X, y=None, **params)
  type: method
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.fit
- class: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.get_params
  langs:
  - python
  module: microsoftml_scikit
  name: get_params
  source:
    id: get_params
    path: sklearn\base.py
    remote:
      branch: master
      path: sklearn\base.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 213
  summary: 'Get parameters for this estimator.

    '
  syntax:
    content: get_params(deep=True)
    parameters:
    - defaultValue: 'True'
      description: 'If True, will return the parameters for this estimator and

        contained subobjects that are estimators.

        '
      id: deep
      type:
      - boolean, optional
    return:
      description: '**params** -- Parameter names mapped to their values.

        '
      type:
      - mapping of string to any
  type: method
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.get_params
- class: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.predict
  langs:
  - python
  module: microsoftml_scikit
  name: predict
  source:
    id: predict
    path: microsoftml_scikit\utils\utils.py
    remote:
      branch: master
      path: microsoftml_scikit\utils\utils.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 46
  summary: 'Returns predictions.

    '
  syntax:
    content: predict(X, **params)
  type: method
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.predict
- class: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.score
  langs:
  - python
  module: microsoftml_scikit
  name: score
  source:
    id: score
    path: sklearn\base.py
    remote:
      branch: master
      path: sklearn\base.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 324
  summary: 'Returns the mean accuracy on the given test data and labels.


    In multi-label classification, this is the subset accuracy

    which is a harsh metric since you require for each sample that

    each label set be correctly predicted.

    '
  syntax:
    content: score(X, y, sample_weight=None)
    parameters:
    - description: 'Test samples.

        '
      id: X
      type:
      - array-like, shape = (n_samples, n_features)
    - description: 'True labels for X.

        '
      id: y
      type:
      - array-like, shape = (n_samples)
      - (n_samples, n_outputs)
    - defaultValue: None
      description: 'Sample weights.

        '
      id: sample_weight
      type:
      - array-like, shape = [n_samples], optional
    return:
      description: '**score** -- Mean accuracy of self.predict(X) wrt. y.

        '
      type:
      - float
  type: method
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.score
- class: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.set_params
  langs:
  - python
  module: microsoftml_scikit
  name: set_params
  source:
    id: set_params
    path: sklearn\base.py
    remote:
      branch: master
      path: sklearn\base.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 250
  summary: 'Set the parameters of this estimator.


    The method works on simple estimators as well as on nested objects

    (such as pipelines). The latter have parameters of the form

    `<component>__<parameter>` so that it''s possible to update each

    component of a nested object.

    '
  syntax:
    content: set_params(**params)
    parameters:
    - id: self
    return:
      type:
      - self
  type: method
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.set_params
references:
- fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.fit
  isExternal: false
  name: fit
  parent: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.fit
- fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.get_params
  isExternal: false
  name: get_params
  parent: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.get_params
- fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.predict
  isExternal: false
  name: predict
  parent: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.predict
- fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.score
  isExternal: false
  name: score
  parent: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.score
- fullName: microsoftml_scikit.AveragedPerceptronBinaryClassifier.set_params
  isExternal: false
  name: set_params
  parent: microsoftml_scikit.AveragedPerceptronBinaryClassifier
  uid: microsoftml_scikit.AveragedPerceptronBinaryClassifier.set_params
- fullName: boolean, optional
  name: boolean, optional
  spec.python:
  - fullName: boolean
    name: boolean
    uid: boolean
  - fullName: ', '
    name: ', '
  - fullName: optional
    name: optional
    uid: optional
  uid: boolean, optional
- fullName: array-like, shape = (n_samples, n_features)
  name: array-like, shape = (n_samples, n_features)
  spec.python:
  - fullName: array-like
    name: array-like
    uid: array-like
  - fullName: ', '
    name: ', '
  - fullName: 'shape = '
    name: 'shape = '
    uid: 'shape = '
  - fullName: (
    name: (
  - fullName: n_samples
    name: n_samples
    uid: n_samples
  - fullName: ', '
    name: ', '
  - fullName: n_features
    name: n_features
    uid: n_features
  - fullName: )
    name: )
  uid: array-like, shape = (n_samples, n_features)
- fullName: array-like, shape = (n_samples)
  name: array-like, shape = (n_samples)
  spec.python:
  - fullName: array-like
    name: array-like
    uid: array-like
  - fullName: ', '
    name: ', '
  - fullName: 'shape = '
    name: 'shape = '
    uid: 'shape = '
  - fullName: (
    name: (
  - fullName: n_samples
    name: n_samples
    uid: n_samples
  - fullName: )
    name: )
  uid: array-like, shape = (n_samples)
- fullName: (n_samples, n_outputs)
  name: (n_samples, n_outputs)
  spec.python:
  - fullName: (
    name: (
  - fullName: n_samples
    name: n_samples
    uid: n_samples
  - fullName: ', '
    name: ', '
  - fullName: n_outputs
    name: n_outputs
    uid: n_outputs
  - fullName: )
    name: )
  uid: (n_samples, n_outputs)
- fullName: array-like, shape = [n_samples], optional
  name: array-like, shape = [n_samples], optional
  spec.python:
  - fullName: array-like
    name: array-like
    uid: array-like
  - fullName: ', '
    name: ', '
  - fullName: 'shape = '
    name: 'shape = '
    uid: 'shape = '
  - fullName: '['
    name: '['
  - fullName: n_samples
    name: n_samples
    uid: n_samples
  - fullName: ']'
    name: ']'
  - fullName: ', '
    name: ', '
  - fullName: optional
    name: optional
    uid: optional
  uid: array-like, shape = [n_samples], optional
