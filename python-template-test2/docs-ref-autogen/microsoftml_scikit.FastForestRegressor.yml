### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: microsoftml_scikit.FastForestRegressor
  fullName: microsoftml_scikit.FastForestRegressor
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.modules.base.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.modules.core.ensemble.fastforestregressor.FastForestRegressor
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: sklearn.base.BaseEstimator
    - inheritance:
      - type: builtins.object
      type: microsoftml_scikit.modules.base.base_pipeline_item.BasePipelineItem
    type: microsoftml_scikit.modules.base.base_predictor.BasePredictor
  - inheritance:
    - type: builtins.object
    type: sklearn.base.RegressorMixin
  langs:
  - python
  module: microsoftml_scikit
  name: FastForestRegressor
  source:
    id: FastForestRegressor
    path: microsoftml_scikit\modules\ensemble\fastforestregressor.py
    remote:
      branch: master
      path: microsoftml_scikit\modules\ensemble\fastforestregressor.py
      repo: https://msdata.visualstudio.com/DefaultCollection/AlgorithmsAndDataScience/_git/PyTlc
    startLine: 20
  summary: '















    '
  syntax:
    content: 'FastForestRegressor(num_trees: numbers.Real = 100, num_leaves: numbers.Real
      = 20, feature_column: str = ''Features'', min_split: numbers.Real = 10, label_column:
      str = ''Label'', weight_column: str = None, group_id_column: str = None, normalize:
      str = ''Auto'', caching: str = ''Auto'', shuffle_labels: bool = False, quantile_sample_count:
      numbers.Real = 100, parallel_trainer: dict = None, train_threads: numbers.Real
      = None, random_state: numbers.Real = 123, feature_select_seed: numbers.Real
      = 123, entropy_coefficient: numbers.Real = 0.0, histogram_pool_size: numbers.Real
      = -1, disk_transpose: bool = None, feature_flocks: bool = True, num_bins: numbers.Real
      = 255, sparsify_threshold: numbers.Real = 0.7, first_use_penalty: numbers.Real
      = 0.0, feature_reuse_penalty: numbers.Real = 0.0, gain_conf_level: numbers.Real
      = 0.0, softmax_temperature: numbers.Real = 0.0, execution_times: bool = False,
      feature_fraction: numbers.Real = 0.7, bagging_size: numbers.Real = 1, example_fraction:
      numbers.Real = 0.7, split_fraction: numbers.Real = 0.7, smoothing: numbers.Real
      = 0.0, allow_empty_trees: bool = True, feature_compression_level: numbers.Real
      = 1, compress_ensemble: bool = False, max_trees_after_compression: numbers.Real
      = -1, test_frequency: numbers.Real = 2147483647, **params)'
    parameters:
    - description: 'Specifies the total number of decision trees to create in the
        ensemble. By creating more decision

        trees, you can potentially get better coverage, but the training time increases.

        '
      id: num_trees
    - description: 'The maximum number of leaves (terminal nodes) that can be created
        in any tree. Higher values

        potentially increase the size of the tree and get better precision, but risk
        overfitting and requiring longer

        training times.

        '
      id: num_leaves
    - description: 'Column to use for features.

        '
      id: feature_column
    - description: 'Minimum number of training instances required to form a leaf.
        That is, the minimal number of documents

        allowed in a leaf of regression tree, out of the sub-sampled data. A ''split''
        means that features in each level of

        the tree (node) are randomly divided.

        '
      id: min_split
    - description: 'Column to use for labels.

        '
      id: label_column
    - description: 'Column to use for example weight.

        '
      id: weight_column
    - description: 'Column to use for example groupId.

        '
      id: group_id_column
    - description: 'If `Auto`, the choice to normalize depends on the preference declared
        by the algorithm. This is the

        default choice. If `No`, no normalization is performed. If `Yes`, normalization
        always performed. If `Warn`,

        if normalization is needed by the algorithm, a warning message is displayed
        but normalization is not performed. If

        normalization is performed, a `MaxMin` normalizer is used. This normalizer
        preserves sparsity by mapping zero to

        zero.

        '
      id: normalize
    - description: 'Whether learner should cache input training data.

        '
      id: caching
    - description: 'Shuffle the labels on every iteration. Useful probably only if
        using this tree as a tree leaf

        featurizer for multiclass.

        '
      id: shuffle_labels
    - description: 'Number of labels to be sampled from each leaf to make the distribtuion.

        '
      id: quantile_sample_count
    - description: 'Allows to choose Parallel FastTree Learning Algorithm.

        '
      id: parallel_trainer
    - description: 'The number of threads to use.

        '
      id: train_threads
    - description: 'The seed of the random number generator.

        '
      id: random_state
    - description: 'The seed of the active feature selection.

        '
      id: feature_select_seed
    - description: 'The entropy (regularization) coefficient between 0 and 1.

        '
      id: entropy_coefficient
    - description: 'The number of histograms in the pool (between 2 and numLeaves).

        '
      id: histogram_pool_size
    - description: 'Whether to utilize the disk or the data''s native transposition
        facilities (where applicable) when

        performing the transpose.

        '
      id: disk_transpose
    - description: 'Whether to collectivize features during dataset preparation to
        speed up training.

        '
      id: feature_flocks
    - description: 'Maximum number of distinct values (bins) per feature.

        '
      id: num_bins
    - description: 'Sparsity level needed to use sparse feature representation.

        '
      id: sparsify_threshold
    - description: 'The feature first use penalty coefficient.

        '
      id: first_use_penalty
    - description: 'The feature re-use penalty (regularization) coefficient.

        '
      id: feature_reuse_penalty
    - description: 'Tree fitting gain confidence requirement (should be in the range
        [0,1) ).

        '
      id: gain_conf_level
    - description: 'The temperature of the randomized softmax distribution for choosing
        the feature.

        '
      id: softmax_temperature
    - description: 'Print execution time breakdown to stdout.

        '
      id: execution_times
    - description: 'The fraction of features (chosen randomly) to use on each iteration.

        '
      id: feature_fraction
    - description: 'Number of trees in each bag (0 for disabling bagging).

        '
      id: bagging_size
    - description: 'Percentage of training examples used in each bag.

        '
      id: example_fraction
    - description: 'The fraction of features (chosen randomly) to use on each split.

        '
      id: split_fraction
    - description: 'Smoothing paramter for tree regularization.

        '
      id: smoothing
    - description: 'When a root split is impossible, allow training to proceed.

        '
      id: allow_empty_trees
    - description: 'The level of feature compression to use.

        '
      id: feature_compression_level
    - description: 'Compress the tree Ensemble.

        '
      id: compress_ensemble
    - description: 'Maximum Number of trees after compression.

        '
      id: max_trees_after_compression
    - description: 'Calculate metric values for train/valid/test every k rounds.

        '
      id: test_frequency
    - description: 'Additional arguments sent to compute engine.

        '
      id: params
  type: class
  uid: microsoftml_scikit.FastForestRegressor
references: []
